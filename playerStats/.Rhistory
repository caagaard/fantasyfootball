}
rankthing <- c()
for (j in 1:5) {
rankthing <- c(rankthing, which(k2016pre[[j]] == ))}
source('~/Documents/projects/ffootball/makebaseline.R', echo=TRUE)
testThing <- makePredictedGames(k2016pre, kprojected)
source('~/Documents/projects/ffootball/makebaseline.R', echo=TRUE)
source('~/Documents/projects/ffootball/makebaseline.R', echo=TRUE)
testThing <- makePredictedGames(k2016pre, kprojected)
kprojected[13]
kprojected
source('~/Documents/projects/ffootball/makebaseline.R', echo=TRUE)
testThing <- makePredictedGames(k2016pre, kprojected)
source('~/Documents/projects/ffootball/makebaseline.R', echo=TRUE)
testThing <- makePredictedGames(k2016pre, kprojected)
source('~/Documents/projects/ffootball/makebaseline.R', echo=TRUE)
testThing <- makePredictedGames(k2016pre, kprojected)
source('~/Documents/projects/ffootball/makebaseline.R', echo=TRUE)
testThing <- makePredictedGames(k2016pre, kprojected)
testThing
kFinalRanks <- makePredictedGames(k2016pre, kprojected)
qbFinalRanks <- makePredictedGames(qb2016pre, qbprojected)
defFinalRanks <- makePredictedGames(def2016pre, defprojected)
qbprojected
length(qbprojected)
qbprojected <- qbprojected*16/10000
qbprojected
qbFinalRanks <- makePredictedGames(qb2016pre, qbprojected)
qb2016pre
source('~/Documents/projects/ffootball/makebaseline.R', echo=TRUE)
qbFinalRanks <- makePredictedGames(qb2016pre, qbprojected)
qb2016pre
levels(unlist(qb2016pre))
tempThing <- as.string(unlist(qb2016pre))
tempThing <- as.character(unlist(qb2016pre))
tempThing
tempThing <- as.factor(tempThing)
levels(tempThing)
for (i in 1:5) {
qb2016pre[[i]] <- factor(qb2016pre[[i]], levels(tempThing))
}
qb2016pre
qbFinalRanks <- makePredictedGames(qb2016pre, qbprojected)
qbFinalRanks
tempThing <- as.factor(as.character(unlist(rb2016pre)))
tempThing
for (i in 1:5) {
rb2016pre[[i]] <- factor(rb2016pre[[i]], levels(tempThing))
}
levels(rb2016pre[[2]])
levels(rb2016pre[[1]])
rbFinalRanks <- makePredictedGames(rb2016pre, rbprojected)
rbFinalRanks
rbprojected <- rbprojected*16/10000
rbFinalRanks <- makePredictedGames(rb2016pre, rbprojected)
rbFinalRanks
wrprojected <- wrprojected*16/10000
tempThing <- as.factor(as.character(unlist(wr2016pre)))
for (i in 1:5) {
wr2016pre[[i]] <- factor(wr2016pre[[i]], levels(tempThing))
}
wr2016pre
wr2016pre[[5]] <- wr2016pre[[5]][2:60]
wr2016pre
wrFinalRanks <- makePredictedGames(wr2016pre, wrprojected)
tempThing <- as.factor(as.character(unlist(wr2016pre)))
for (i in 1:5) {
wr2016pre[[i]] <- factor(wr2016pre[[i]], levels(tempThing))
}
wrFinalRanks <- makePredictedGames(wr2016pre, wrprojected)
wrFinalRanks
rbFinalRanks
te2016pre
tempThing <- as.factor(as.character(unlist(te2016pre)))
tempThings
tempThing
for (i in 1:5) {
te2016pre[[i]] <- factor(te2016pre[[i]], levels(tempThing))
}
te2016pre
teFinalRanks <- makePredictedGames(te2016pre, teprojected)
teFinalRanks
teprojected <- teprojected*16/10000
teFinalRanks <- makePredictedGames(te2016pre, teprojected)
teFinalRanks
def2016pre
tmpDef
rm(tmpDef)
def2016pre
levels(defense$Name)
levels(defense$pos)
testThing
testThing <- defense$Name[defense$pos == 'Def']
testThing
testThing <- as.factor(as.character(testThing))
levels(testThing)
fixDefensetoFactor(def2016pre, testThing)
testVar
testVar <- fixDefensetoFactor(def2016pre, testThing)
testVar
testVar <- def2016pre[[1]]
testVar
for (i in 1:length(testVar)) {
}
testVar <- as.character(testVar)
testVar <- gsub(' .*', '', testVar)
testVar
for (i in 1:length(testVar)) {
testVar[i] <- def2016pre[[3]][grep(testVar[i], def2016pre[[3]])]
}
testVar
def2016pre[[3]]
sourceList <- levels(def2016pre[[3]])
testVar <- as.character(def2016pre[[1]])
testVar
testVar <- gsub(' .*', '', testVar)
testVar
for (i in 1:length(testVar)) {
testVar[i] <- sourceList[grep(testVar[i], sourceList)]
}
testVar
def2016pre[[1]]
def2016pre[[1]] <- as.character(def2016pre[[1]])
def2016pre[[1]]
def2016pre[[1]] <- testVar
def2016pre
def2016pre[[1]] <- as.factor(def2016pre[[1]])
def2016pre
tempThing <- as.factor(as.character(unlist(def2016pre)))
levels(tempThing)
for (i in 1:5) {
def2016pre[[i]] <- factor(def2016pre[[i]], levels(tempThing))
}
levels(def2016pre[[2]])
defprojected
defprojected <- defprojected*16/10000
defprojected
defFinalRanks <- makePredictedGames(def2016pre, defprojected)
defFinalRanks
save.image("~/Documents/projects/ffootball/pastRankings/ffdata.RData")
teFinalRanks
?sort
sort(teFinalRanks)
teFinalRanks[,order(-teFinalRanks$gamesWon)]
teFinalRanks[order(-teFinalRanks$gamesWon),]
teFinalRanks <- teFinalRanks[order(-teFinalRanks$gamesWon),]
teFinalRanks
qbFinalRanks
qbFinalRanks <- qbFinalRanks[order(-qbFinalRanks$gamesWon),]
qbFinalRanks
rbFinalRanks <- rbFinalRanks[order(-rbFinalRanks$gamesWon),]
rbFinalRanks
wrFinalRanks
wrFinalRanks <- wrFinalRanks[order(-wrFinalRanks$gamesWon),]
wrFinalRanks
qbFinalRanks
kFinalRanks <- kFinalRanks[order(-kFinalRanks$gamesWon),]
kFinalRanks
defFinalRanks
defFinalRanks <- defFinalRanks[order(-defFinalRanks$gamesWon),]
defFinalRanks
source('~/Documents/projects/ffootball/makebaseline.R', echo=TRUE)
bigTest(2,1)
bigTest(2,1)
bigTest(2,1)
basecase <- GameScoreSamples(1000)
testScores <- numeric()
for(i in 1:1000) {
testScores <- c(testScores, bigTest(2,1))
}
compareCheck <- testScores - basecase
length(compareCheck[compareCheck > 0])
570*16/1000
qbFinalRanks[1]
qbFinalRanks[1,1]
qbFinalRanks[1,2]
qbprojected[1]
qbprojected[2]
wrprojected[1]
.42+.88
qbFinalRanks[,2]
qbFinalRanks[,2] <- qbFinalRanks[,2]-8
qbFinalRanks[,2]
rbFinalRanks[,2]
rbFinalRanks[,2] <- rbFinalRanks[,2]-8
wrFinalRanks[,2]
wrFinalRanks[,2] <- wrFinalRanks[,2] - 8
teFinalRanks[,2]
teFinalRanks[,2] <- teFinalRanks[,2] - 8
kFinalRanks[,2]
kFinalRanks[,2] <- kFinalRanks[,2]-8
defFinalRanks[,2] <- defFinalRanks[,2]-8
kFinalRanks[,2]
worstTeam <- kFinalRanks[length(kFinalRanks[,2]), 2] + teFinalRanks[length(teFinalRanks[,2]),2] + wrFinalRanks[length(wrFinalRanks[,2])-1:length(wrFinalRanks[,2]), 2] + rbFinalRanks[length(rbFinalRanks[,2])-1: length(rbFinalRanks[,2]),2] + qbFinalRanks[length(qbFinalRanks[,2]),2] + .5*wrFinalRanks[66,2] + .5*rbFinalRanks[58,2]
kFinalRanks[length(kFinalRanks[,2]),2]
kFinalRanks[length(kFinalRanks[,2]),2]+teFinalRanks[length(teFinalRanks[,2]),2]
kFinalRanks[length(kFinalRanks[,2]),2]+teFinalRanks[length(teFinalRanks[,2]),2]+wrFinalRanks[length(wrFinalRanks[,2]),2]
kFinalRanks[length(kFinalRanks[,2]),2]+teFinalRanks[length(teFinalRanks[,2]),2]+wrFinalRanks[length(wrFinalRanks[,2]),2] + wrFinalRanks[length(wrFinalRanks[,2])-1,2]
worstTeam <- kFinalRanks[length(kFinalRanks[,2]),2]+teFinalRanks[length(teFinalRanks[,2]),2]+wrFinalRanks[length(wrFinalRanks[,2]),2] + wrFinalRanks[length(wrFinalRanks[,2])-1,2]
worstTeam
worstTeam <- worstTeam + rbFinalRanks[length(rbFinalRanks[,2]),2] + rbFinalRanks[length(rbFinalRanks[,2])-1,2] + qbFinalRanks[length(qbFinalRanks[,2]),2]
worstTeam
worstTeam <- worstTeam + wrFinalRanks[length(wrFinalRanks[,2])-2,2]
worstTeam
worstTeam+8
save.image("~/Documents/projects/ffootball/pastRankings/ffdata.RData")
costOfGame <- .0266792
wrFinalRanks[1,2] - wrFinalRanks[length(wrFinalRanks[,2]),2]
1.28512/costOfGame
qbCost <- (qbFinalRanks[,2] - qbFinalRanks[length(qbFinalRanks[,2]),2])/costOfGame
qbCost
qbValues <- cbind(qbFinalRanks[,1], qbCost)
qbValues
qbValues <- cbind(qbFinalRanks$Names, qbCost)
qbValues
qbFinalRanks
qbFinalRanks$Names
qbValues <- data.frame(Names = qbFinalRanks$Names, Cost = qbCost)
qbValues
rbCost <- (rbFinalRanks[,2] - rbFinalRanks[length(rbFinalRanks[,2]),2])/costOfGame
rbCost
rbValues <- data.frame(Names = rbFinalRanks$Names, Cost = rbCost)
rbValues
wrCost <- (wrFinalRanks$gamesWon - wrFinalRanks$gamesWon[length(wrFinalRanks$gamesWon)])/costOfGame
wrValues <- data.frame(Name = wrFinalRanks$Names, Cost = wrCost)
wrValues
teCost <- (teFinalRanks$gamesWon - teFinalRanks$gamesWon[length(teFinalRanks)])/costOfGame
teValues <- data.frame(Name = teFinalRanks$Names, Cost = teCost)
teValues
teCost <- (teFinalRanks$gamesWon - teFinalRanks$gamesWon[length(teFinalRanks[,2])])/costOfGame
teValues <- data.frame(Name = teFinalRanks$Names, Cost = teCost)
teValues
kCost <- (kFinalRanks$gamesWon - kFinalRanks$gamesWon[length(kFinalRanks[,2])])/costOfGame
kCost
worstTeam <- worstTeam - kFinalRanks[length(kFinalRanks[,2]),2]
worstTeam
worstTeam <- worstTeam+kFinalRanks$gamesWon[12]
worstTeam
costOfGame
costOfGame <- .0257
kCost <- (kFinalRanks$gamesWon - kFinalRanks$gamesWon[12])/costOfGame +1
kValues <- data.frame(Name = kFinalRanks$Names, Cost = kCost)
kValues
teCost <- (teFinalRanks$gamesWon - teFinalRanks$gamesWon[length(teFinalRanks$gamesWon)])/costOfGame +1
teCost
teValues$Cost <- teCost
teValues
qbCost <- (qbFinalRanks$gamesWon - qbFinalRanks$gamesWon[length(qbFinalRanks$gamesWon)])/costOfGame +1
qbValues$Cost <- qbCost
qbValues
rbCost <- (rbFinalRanks$gamesWon - rbFinalRanks$gamesWon[length(rbFinalRanks$gamesWon)])/costOfGame +1
rbCost
rbValues$Cost <- rbCost
rbValues
wrCost <- (wrFinalRanks$gamesWon - wrFinalRanks$gamesWon[length(wrFinalRanks$gamesWon)])/costOfGame +1
wrCost
wrValues$Cost <- wrCost
wrValues
save.image("~/Documents/projects/ffootball/backedup.RData")
save.image("~/Documents/projects/ffootball/pastRankings/ffdata.RData")
load("~/Documents/projects/ffootball/pastRankings/ffdata.RData")
rbValues
rbValues[rbValues$Names = Devonta Freeman]
rbValues[rbValues$Names = 'Devonta Freeman']
rbValues[rbValues$Names = 'Devonta Freeman',]
rbValues[rbValues$Names = ='Devonta Freeman',]
rbValues[rbValues$Names =='Devonta Freeman',]
availableRB <- rbValues[]
availableRB <- rbind(availableRB[1,], availableRB[3:58,])
availableRB
wrValues[wrValues$Name== 'Jarvis Landry']
wrValues[wrValues$Name== 'Jarvis Landry',]
wrValues
qbValues
teValues
wrFinalRanks
wrValues
wrAvailable <- wrFinalRanks[c(5, 7, 10:length(wrFinalRanks[,2])),]
wrAvailable
wrAvailable <- wrAvailable[c(1:4,6,7,10:length(wrAvailable[,1])),]
wrAvailable
wrAvailable <- wrAvailable[c(1:11,13:length(wrAvailable[,1]),]
wrAvailable <- wrAvailable[c(1:11,13:length(wrAvailable[,1])),]
wrAvailable
length(wrAvailable$Names)
wrAvailable <- wrAvailable[c(1:51,53:55,57),]
wrAvailable
wrAvCosts <- (wrAvailable$gamesWon - wrAvailable$gamesWon[length(wrAvailable$gamesWon)])/(costOfGame*164.25/200) +1
wrAvCosts
wrAfterKeeps <- data.frame(Name = wrAvailable$Names, Cost = wrAvCosts)
wrAfterKeeps
qbFinalRanks
qbAvailabl <- qbFinalRanks[c(1:12, 13, 14:length(qbFinalRanks[,1])),]
qbAvailabl
qbAvailabl <- qbFinalRanks[c(1:13, 15, 17:length(qbFinalRanks[,1])),]
qbAvailabl
inflatedGameCost <- (164.25*costOfGame/200)
qbAvCosts <- (qbAvailabl$gamesWon - qbAvailabl$gamesWon[length(qbAvailabl$gamesWon)])/inflatedGameCost +1
qbAvCosts
qbAfterKeeps <- data.frame(Name = qbAvailabl$Names, Cost = qbAvCosts)
qbAfterKeeps
qbValues
teFinalRanks
teAvailable <- teFinalRanks[c(3,6:length(teFinalRanks[,1])),]
teAvailable
teAvCosts <- (teAvailable$gamesWon - teAvailable$gamesWon[length(teAvailable$gamesWon)])/inflatedGameCost +1
teAvCosts
teAfterKeeps <- data.frame(Names = teAvailable$Names, Cost = teAvCosts)
teAfterKeeps
teValues
kAfterKeeps <- data.frame(Names = kValues$Name, cost = kValues$Cost*costOfGame/inflatedGameCost)
kAfterKeeps
kAfterKeeps <- data.frame(Names = kValues$Name, cost = (kValues$Cost-1)*costOfGame/inflatedGameCost)
kAfterKeeps
kValues
rbFinalRanks
rbAvailable <- rbFinalRanks[c(1,3:5,9:13,15:length(rbFinalRanks)),]
rbAvailable
rbAvailable <- rbFinalRanks[c(1,3:5,9:13,15:length(rbFinalRanks[,1])),]
rbAvailable
which(rbAvailable$Names == 'Duke Johnson')
which(rbAvailable$Names == 'Duke Johnson Jr')
which(rbAvailable$Names == 'Matt Jones')
which(rbAvailable$Names == 'Giovani Bernard')
rbAvailable <- rbAvailable[c(1:21,23,24,26,28:length(rbAvailable$Names)),]
rbAvailable
rbAvCosts <- (rbAvailable$gamesWon - rbAvailable$gamesWon[length(rbAvailable$gamesWon)])/inflatedGameCost + 1
rbAvCosts
rbAfterKeeps <- data.frame(Names = rbAvailable$Names, Cost = rbAvCosts)
rbAfterKeeps
rbValues
kAfterKeeps
kAfterKeeps$cost <- kAfterKeeps$cost + 1
kAfterKeeps
kAvailable
kFinalRanks
rbFinalRanks
rbAvailable
kFinalRanks
qbAvailabl
qbAfterKeeps$Cost[1]
rbAfterKeeps$Cost[1]
length(qbAvailabl[,1])
qbComparison <- data.frame(Name = qbAvailabl$Names, Rating = (qbAvailabl$gamesWon - qbAvailabl$gamesWon[24])/qbAvCosts)
qbComparison
length(rbAvailable$gamesWon)
rbComparison <- data.frame(Name = rbAvailable$Names, Rating = (rbAvailable$gamesWon - rbAvailable$gamesWon[50])/rbAvCosts)
rbComparison
length(wrAvailable$gamesWon)
wrComparison <- data.frame(Name = wrAvailable$Names, Rating = (wrAvailable$gamesWon - wrAvailable$gamesWon[55])/wrAvCosts)
wrComparison
length(teAvailable$gamesWon)
teComparison <- data.frame(Names = teAvailable$Names, Rating = (teAvailable$gamesWon - teAvailable$gamesWon[17])/inflatedGameCost)
teComparison
teComparison <- data.frame(Names = teAvailable$Names, Rating = (teAvailable$gamesWon - teAvailable$gamesWon[17])/teAvCosts)
teComparison
length(kFinalRanks)
length(kFinalRanks$gamesWon)
kComparison <- data.frame(Names = kFinalRanks$Names, Rating = (kFinalRanks$gamesWon - kFinalRanks$gamesWon[21])/kValues$Cost)
kComparison
kFinalRanks
kCost
.28*.248
(.28-.248)/14.024
(.28+.248)/14.024
save.image("~/Documents/projects/ffootball/backedup.RData")
kAfterKeeps
qbAfterKeeps
rbAfterKeeps
wrAfterKeeps
teAfterKeeps
rbComparison
wrMat2015
rbValues
rbFinalRanks
rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Lamar Miller']
rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Lamar Miller'] + rbFinalRanks$gamesWon[5]
rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Lamar Miller'] + rbFinalRanks$gamesWon[5] + rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Arian Foster']
rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Lamar Miller'] + rbFinalRanks$gamesWon[5] + rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Arian Foster']+qbFinalRanks$gamesWon[qbFinalRanks$Names == 'Ben Roethlisberger']
rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Lamar Miller'] + rbFinalRanks$gamesWon[5] + rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Arian Foster']+qbFinalRanks$gamesWon[qbFinalRanks$Names == 'Ben Roethlisberger'] + teFinalRanks$gamesWon[teFinalRanks$Names == 'Gary Barnidge']
rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Lamar Miller'] + rbFinalRanks$gamesWon[5] + rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Arian Foster']+qbFinalRanks$gamesWon[qbFinalRanks$Names == 'Ben Roethlisberger'] + teFinalRanks$gamesWon[teFinalRanks$Names == 'Gary Barnidge'] + kFinalRanks$gamesWon[1]
rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Lamar Miller'] + rbFinalRanks$gamesWon[5] + rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Arian Foster']+qbFinalRanks$gamesWon[qbFinalRanks$Names == 'Ben Roethlisberger'] + teFinalRanks$gamesWon[teFinalRanks$Names == 'Gary Barnidge'] + kFinalRanks$gamesWon[1] + wrFinalRanks$gamesWon[1]
rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Lamar Miller'] + rbFinalRanks$gamesWon[5] + rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Arian Foster']+qbFinalRanks$gamesWon[qbFinalRanks$Names == 'Ben Roethlisberger'] + teFinalRanks$gamesWon[teFinalRanks$Names == 'Gary Barnidge'] + kFinalRanks$gamesWon[1] + wrFinalRanks$gamesWon[1]+wrFinalRanks$gamesWon[wrFinalRanks$Names == 'Brandon Marshall']
aagaard<- .6368
rbFinalRanks$gamesWon[rbFinalRanks$Names == 'David Johnson'] + rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Thomas Rawls'] + qbFinalRanks$gamesWon[qbFinalRanks$Names == 'Blake Bortles'] + wrFinalRanks$gamesWon[wrFinalRanks$Names == 'Sammy Watkins'] + wrFinalRanks$gamesWon[wrFinalRanks$Names == 'Allen Hurns'] + wrFinalRanks$gamesWon[wrFinalRanks$Names == 'Tyler Lockett'] + teFinalRanks$gamesWon[teFinalRanks$Names == 'Jason Witten'] + kFinalRanks$gamesWon[kFinalRanks$Names == 'Adam Vinatieri']
chuong <- -2.14064
qbFinalRanks
qbFinalRanks$gamesWon[2] + rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Adrian Peterson'] + rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Doug Martin'] + wrFinalRanks$gamesWon[wrFinalRanks$Names == 'Jarvis Landry'] + wrFinalRanks$gamesWon[wrFinalRanks$Names == 'Randall Cobb'] + teFinalRanks$gamesWon[teFinalRanks$Names == 'Greg Olsen'] + kFinalRanks$gamesWon[kFinalRanks$Names == 'Graham Gano'] + wrFinalRanks$gamesWon[wrFinalRanks$Names == 'Snead']
qbFinalRanks$gamesWon[2] + rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Adrian Peterson'] + rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Doug Martin'] + wrFinalRanks$gamesWon[wrFinalRanks$Names == 'Jarvis Landry'] + wrFinalRanks$gamesWon[wrFinalRanks$Names == 'Randall Cobb'] + teFinalRanks$gamesWon[teFinalRanks$Names == 'Greg Olsen'] + kFinalRanks$gamesWon[kFinalRanks$Names == 'Graham Gano'] + wrFinalRanks$gamesWon[wrFinalRanks$Names == 'Willie Snead']
tommy <- -.54944
qbFinalRanks$gamesWon[qbFinalRanks$Names == 'Cam Newton'] + rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Todd Gurley'] + rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Ameer Abdullah'] + wrFinalRanks$gamesWon[wrFinalRanks$Names == 'Julian Edelman'] + teFinalRanks$gamesWon[1] + kFinalRanks$gamesWon[kFinalRanks$Names == 'Blair Walsh']
wrFinalRanks$gamesWon[wrFinalRanks$Names=='Mike Wallace']
.36+.69408
stillman <0 -1.05408
stillman <- -1.05408
qbFinalRanks$gamesWon[1] + rbFinalRanks$gamesWon[rbFinalRanks$Names == 'DeMarco Murray'] + rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Jeremy Langford'] + wrFinalRanks$gamesWon[wrFinalRanks$Names == 'DeAndre Hopkins'] + wrFinalRanks$gamesWon[wrFinalRanks$Names == 'Larry Fitzgerald'] + wrFinalRanks$gamesWon[wrFinalRanks$Names == 'Golden Tate'] + kFinalRanks$gamesWon[wrFinalRanks$Names == 'Cairo Santos']
qbFinalRanks$gamesWon[1] + rbFinalRanks$gamesWon[rbFinalRanks$Names == 'DeMarco Murray'] + rbFinalRanks$gamesWon[rbFinalRanks$Names == 'Jeremy Langford'] + wrFinalRanks$gamesWon[wrFinalRanks$Names == 'DeAndre Hopkins'] + wrFinalRanks$gamesWon[wrFinalRanks$Names == 'Larry Fitzgerald'] + wrFinalRanks$gamesWon[wrFinalRanks$Names == 'Golden Tate']
teFinalRanks
kFinalRanks
kwong <- -1.1
save.image("~/Documents/projects/ffootball/pastRankings/ffdata.RData")
full_stats[full_stats$ == '2014']
full_stats[full_stats$ == '2014',]
full_stats[full_stats$ == 2014,]
full_stats[full_stats$year == 2014,]
GameScoreSamples(16)
GameScoreSamples(16)
tmpPos
load("~/Documents/projects/ffootball/pastRankings/ffdata.RData")
full_stats[full_stats$pos == 'QB']
full_stats[full_stats$pos == 'QB',]
colnames(full_stats)
makeYearRanks('QB', 2013)
makeYearRanks('QB', 2012)
makeYearRanks('QB', 2011)
makeYearRanks('QB', 2014)
makeYearRanks('QB', 2015)
makeRankedPosScore('QB', 3)
makeRankedPosScore('QB', 1)
makeRankedPosScore('QB', 1)
makeRankedPosScore('QB', 1)
makeRankedPosScore('QB', 1)
makeRankedPosScore('QB', 1)
makeRankedPosScore('QB', 1)
source('~/Documents/projects/ffootball/makebaseline.R', echo=TRUE)
source('~/Documents/projects/ffootball/makebaseline.R', echo=TRUE)
makeRankedPosScore('QB', 1)
qbMat2012
post2012k
colnames(full_stats)
testThing <- makeYearSums('QB' ,2012)
testThing
type(testThing)
typeof(testThing)
typeof(full_stats)
str(full_stats)
str(testThing)
testThing
makePositionMatrix(qb2012pre, post2012qb, 15)
makePositionMatrix(qb2012pre, post2012qb, 20)
makePositionMatrix(qb2012pre, post2012qb, 32)
qb2012pre
post2012qb
makeTopHist('QB')
top_qb_hist
str(top_k_hist)
qbComparison
makePredictedGames(qbComparison, qbValues)
makePredictedGames(qbComparison$Name, qbValues$Cost)
post2012qb
post2012te
makeYearRanks('QB', 2013)
score_history
mean(score_history)
mean(score_history[,1])
GameScoreSamples(10000)
mean(GameScoreSamples(10000))
mean(score_history[,1])
testThing <- GameScoreSamples(10000)
testThing[testThing > 89.88845]
testThing <- GameScoreSamples(10000)
testThing[testThing > 89.88845]
testThing <- GameScoreSamples(10000)
testThing[testThing > 89.88845]
testThing <- GameScoreSamples(10000)
testThing[testThing > 89.88845]
testThing <- GameScoreSamples(10000)
testThing[testThing > 89.88845]
full_stats
full_stats[full_stats$pos == 'QB',]
full_stats[full_stats$pos == 'QB',6]
hist(full_stats[full_stats$pos=='QB', 6])
qqnorm(full_stats[full_stats$pos == 'QB',6])
exit
availableRB
kComparison
kFinalRanks
kValues
predictions
te2016pre
kpredictionMat
dat
teFinalRanks
defFinalRanks
defMat2015
post2012k
qbValues
qbComparison
qbFinalRanks
top_qb_hist
kprojected
makePredictedGames(qb2016pre, qbprojected)
qbValues
qbComparison
qbFinalRanks
makePredictedGames(qb2016pre, qbprojected)
View(defFinalRanks)
View(kComparison)
View(kFinalRanks)
View(kComparison)
View(kFinalRanks)
View(availableRB)
View(rbFinalRanks)
View(qbValues)
View(qbFinalRanks)
setwd("~/projects/ffootball/fantasyfootball/playerStats")
density(read.csv("2016Aaron Rodgers .txt")[,6])
arodg
arodg <- read.csv("2016Aaron Rodgers .txt")[,6]
density(read.csv("2016Aaron Rodgers .txt", header = TRUE, row.names = NULL)[,6])
test_dens <- density(read.csv("2016Aaron Rodgers .txt", header = TRUE, row.names = NULL)[,6])
test_dens
